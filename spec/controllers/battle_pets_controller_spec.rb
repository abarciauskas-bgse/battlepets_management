require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe BattlePetsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # BattlePet. As you add validations to BattlePet, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {name: 'Totoro'} }
  let(:invalid_attributes) { {superpower: 'invisibility'} }

  describe "GET #show" do
    it "assigns the requested battle_pet as @battle_pet" do
      battle_pet = BattlePet.create! valid_attributes
      get :show, params: {id: battle_pet.to_param}
      expect(assigns(:battle_pet)).to eq(battle_pet)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new BattlePet" do
        expect {
          post :create, params: {battle_pet: valid_attributes}
        }.to change(BattlePet, :count).by(1)
      end

      it "redirects to the created battle_pet" do
        post :create, params: {battle_pet: valid_attributes}
        expect(response).to be_success
      end

      context 'with specified skills' do
        let(:valid_attributes) do
          {name: 'Totoro', strength: 80, wit: 1, agility: 9, senses: 5}
        end

        it "creates a new BattlePet" do
          expect {
            post :create, params: {battle_pet: valid_attributes}
          }.to change(BattlePet, :count).by(1)
        end

        it "creates a BattlePet with the specified params" do
          post :create, params: {battle_pet: valid_attributes}
          expect(BattlePet.last.strength).to eq(valid_attributes[:strength])
        end
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved battle_pet as @battle_pet" do
        post :create, params: {battle_pet: invalid_attributes}
        expect(assigns(:battle_pet)).to be_a_new(BattlePet)
      end

      it "does not create a new BattlePet" do
        expect {
          post :create, params: {battle_pet: invalid_attributes}
        }.not_to change(BattlePet, :count)
      end
    end
  end
end
